@page "/studentinfo"
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inject ProtectedSessionStorage sessionStorage

<Card>
    @{
        if (isEditable)
        {
        <CardBody>
            <CardTitle Size="5">Edit Student Info here:</CardTitle>
            StudentIdNumber: <TextEdit Placeholder="@myStudent?.StudentIdNumber.ToString()" />
            FirstName: <TextEdit Placeholder="@myStaff?.FirstName" />
            LastName: <TextEdit Placeholder="@myStaff?.LastName" />
            Birthday: <TextEdit Placeholder="@myStudent?.Birthday.ToString()" />
            Address: <TextEdit Placeholder="@myStudent?.Address" />
            Major: <TextEdit Placeholder="@myStudent?.Major" />
            FirstYearEnrolled: <TextEdit Placeholder="@myStudent?.FirstYearEnrolled.ToString()" />
            HighSchoolAttended: <TextEdit Placeholder="@myStudent?.HighSchoolAttended" />
            UndergraduateSchoolAttended: <TextEdit Placeholder="@myStudent?.UndergraduateSchoolAttended" />
        </CardBody>
            <Button Clicked="@OnCancelButtonClicked">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@OnSubmitButtonClicked">Submit</Button>
        }
        else
        {
            <Button Color="Color.Warning" Clicked="@OnEditableButtonClicked">Edit</Button>
            <CardBody>
                <CardTitle Size="5">Student Info</CardTitle>
                StudentIdNumber: @myStudent?.StudentIdNumber
                <br />
                FirstName: @myStudent?.FirstName
                <br />
                LastName: @myStudent?.LastName
                <br />
                Birthday: @myStudent?.Birthday.ToString()
                <br />
                Address: @myStudent?.Address
                <br />
                Major: @myStudent?.Major
                <br />
                FirstYearEnrolled: @myStudent?.FirstYearEnrolled.ToString()
                <br />
                HighSchoolAttended: @myStudent?.HighSchoolAttended
                <br />
                UndergraduateSchoolAttended: @myStudent?.UndergraduateSchoolAttended
            </CardBody>
        }
    }
</Card>

@code
{
    public StudentModel myStudent { get; set; }
    public StaffModel myStaff { get; set; }


    // Blazor event
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetStudentByLoginId";
            endpoint += '?' + $"loginId={(await sessionStorage.GetAsync<int>("LoginId")).Value}";

            // Call the endpoint
            HttpResponseMessage response = await ClientFactory.CreateClient().GetAsync(endpoint);

            // Set our Student
            myStudent = await response.Content.ReadFromJsonAsync<StudentModel>();

            // Log the response
            Console.WriteLine(await response.Content.ReadAsStringAsync());

        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }
    }


    bool isEditable = false;

    void OnEditableButtonClicked()
    {
        isEditable = true;
    }

    void OnCancelButtonClicked()
    {
        isEditable = false;
    }

    async Task OnSubmitButtonClicked()
    {
        // Update this Student
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "UpdateStudentById/";

            // The HTTP request body we will send
            string jsonStudent = JsonSerializer.Serialize<StudentModel>(myStudent);
            StringContent httpContent = new(jsonStudent);

            // Call the endpoint
            HttpResponseMessage response = await ClientFactory.CreateClient().PutAsync(endpoint, httpContent);

            // Log the response
            Console.WriteLine(await response.Content.ReadAsStringAsync());

        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }
    }
}
