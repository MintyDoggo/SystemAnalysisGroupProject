@inject IConfiguration Configuration
@inject IHttpClientFactory _clientFactory
@inject ProtectedSessionStorage sessionStorage
@inject IConfiguration Configuration
@using System.IO;

<h3>ArtifactEditor</h3>


<Card>
    @{
        foreach (KeyValuePair<RequiredArtifactModel, ArtifactModel> entry in RequiredArtifactToArtifactMap)
        {
            currentArtifact = entry.Value;
            <Card>
                <CardBody>
                    <CardTitle Size="5">@entry.Key.Name</CardTitle>
                    <Check TValue="bool" ReadOnly="IsCheckoffReadonly" @bind-Checked="entry.Value.CheckedOff">Checked off</Check>
                    <InputFile OnChange="@LoadFiles" />
                    @if (entry.Value.Document?.Length == 0)
                    {
                        <p class="text-danger">Document needs submiting!</p>
                    }
                    else if (entry.Value.Document?.Length > 0)
                    {
                        if (entry.Value.CheckedOff == false)
                        {
                            <p class="text-warning">Submited, awaiting approval</p>
                        }
                        else
                        {
                            <p class="text-success">Submited and aproved!</p>
                        }
                    }

                </CardBody>
            </Card>
        }

    }
</Card>



@code
{
    [Parameter]
    public bool IsCheckoffReadonly { get; set; } = true;
    // list of all the artifacts the student has. ***Size = amount of rows in tblRequiredArtifacts***
    List<ArtifactModel> student_artifacts = new List<ArtifactModel>();
    public List<RequiredArtifactModel> RequiredArtifacts { get; set; } = new List<RequiredArtifactModel>();

    Dictionary<RequiredArtifactModel, ArtifactModel> RequiredArtifactToArtifactMap = new Dictionary<RequiredArtifactModel, ArtifactModel>();
    public StudentModel myStudent { get; set; }

    private ArtifactModel currentArtifact { get; set; }


    async Task OnSubmitButtonClicked()
    {

        //// Update this Artifact in the database
        //try
        //{
        //    // The API endpoint to call
        //    string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "UpdateArtifactById/";
        //    endpoint += '?' + $"id={}" + '&' + $"requiredArtifactId={}" + '&' + $"studentId={}" + '&' + $"checkedOff={}";
        //
        //    // The HTTP request body we will send
        //    StringContent httpContent = new(PdfBytes.ToString());
        //
        //    // Call the endpoint
        //    HttpResponseMessage response = await _clientFactory.CreateClient().PutAsync(endpoint, httpContent);
        //}
        //catch (Exception e)
        //{
        //    Console.WriteLine("Database services must be offline");
        //}
    }

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        const int maxFileSize = 10 * 1000000; // 10MB
        MemoryStream memory = new MemoryStream();
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(memory);

        currentArtifact.Document = memory.ToArray();

    }





    // Blazor event
    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }



    async Task Reload()
    {
        // Update Required artifacts
        RequiredArtifacts = new List<RequiredArtifactModel>();
        // Update our RequiredArtifacts list
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetRequiredArtifacts/";

            IEnumerable<RequiredArtifactModel> getRequiredArtifactsResponse = await _clientFactory.CreateClient().GetFromJsonAsync<IEnumerable<RequiredArtifactModel>>(endpoint);
            RequiredArtifacts.Clear();
            RequiredArtifacts = getRequiredArtifactsResponse.ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }





        // Update our Artifacts list
        try
        {
            Int32 loggedInId = -1;
            loggedInId = (await sessionStorage.GetAsync<Int32>("LoginId")).Value;
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetArtifactsByStudentId/?studentId=" + loggedInId;

            IEnumerable<ArtifactModel> getArtifactsResponse = await _clientFactory.CreateClient().GetFromJsonAsync<IEnumerable<ArtifactModel>>(endpoint);
            student_artifacts = new List<ArtifactModel>(getArtifactsResponse);
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }



        MapRequiredArtifactsToArtifacts();
        // always call StateHasChanged!
        StateHasChanged();
    }

    public void MapRequiredArtifactsToArtifacts()
    {
        foreach (RequiredArtifactModel requiredArtifact in RequiredArtifacts)
        {
            ArtifactModel artifactModelToPair = new ArtifactModel();
            foreach (ArtifactModel artifact in student_artifacts)
            {
                if (artifact.RequiredArtifactId == requiredArtifact.Id)
                {
                    artifactModelToPair = artifact;
                }
            }

            RequiredArtifactToArtifactMap.Add(requiredArtifact, artifactModelToPair);
        }
    }

    void OnSelectedRowChanged()
    {
        StateHasChanged();
    }
}