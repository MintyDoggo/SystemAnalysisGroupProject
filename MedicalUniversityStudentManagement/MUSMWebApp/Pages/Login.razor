@page "/"
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager
@inject ProtectedSessionStorage  sessionStorage

<CardBody>
    <CardTitle Size="5">Welcome</CardTitle>
    Username: <TextEdit @ref="@username_textbox" Placeholder="@myLogin?.Username" />
    Password: <TextEdit @ref="@password_textbox" Placeholder="@myLogin?.Password" />
</CardBody>


<Button Color="Color.Primary" Clicked="@OnSubmitButtonClicked">Submit</Button>
<p style="color:#FF0000">@info</p>
<Button Color="Color.Warning" Clicked="@BypassAdmin">Admin</Button>
<Button Color="Color.Warning" Clicked="@BypassStaff">Staff</Button>
<Button Color="Color.Warning" Clicked="@BypassStudent">Student</Button>

@code
{
    public LoginModel myLogin { get; set; } = new LoginModel();

    String info = "";
    public TextEdit username_textbox;
    public TextEdit password_textbox;

    async Task OnSubmitButtonClicked()
    {
        myLogin.Username = username_textbox.Text;
        myLogin.Password = password_textbox.Text;

        if (myLogin.Username != /*check if user exists in database*/"Carter")
        {
            info = "Invalid Username. Please try again.";
            return;
        }

        //set Id using primary key for the user here:
        //myLogin.Id = // get from database

        if (myLogin.Password != /*check if password corresponds with myLogin.Id in database*/"123")
        {
            info = "Invalid Password. Please try again.";
            return;
        }

        //set user type here
        //myLogin.UserType = //get from database

        await sessionStorage.SetAsync("LoginId", myLogin.Id);
        await sessionStorage.SetAsync("Username", myLogin.Username.ToString());
        await sessionStorage.SetAsync("Password", myLogin.Password.ToString());
        await sessionStorage.SetAsync("UserType", myLogin.UserType.ToString());

        NavManager.NavigateTo("/home", true);
    }


    //DELETE ALL 3 OF THESE LATER
    async Task BypassAdmin()
    {
        await sessionStorage.SetAsync("UserType", "Admin");
        NavManager.NavigateTo("/home", true);
    }

    async Task BypassStaff()
    {
        await sessionStorage.SetAsync("UserType", "Staff");
        NavManager.NavigateTo("/home", true);
    }

    async Task BypassStudent()
    {
        await sessionStorage.SetAsync("UserType", "Student");
        NavManager.NavigateTo("/home", true);
    }
}
