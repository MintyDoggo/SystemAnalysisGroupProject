@inject IHttpClientFactory _clientFactory
@inject IConfiguration Configuration
@inject ProtectedSessionStorage sessionStorage
@using System.Text.Json


<h3>Change Password</h3>

<Card>
    @{
        if (isEditable)
        {
            <CardTitle Size="5">Change Username and Password:</CardTitle>
            <CardBody>
                Username: <TextEdit @ref="UsernameTextEdit" Placeholder="-----" />
                Password: <TextEdit @ref="PasswordTextEdit" Placeholder="****" />
            </CardBody>
            <Button Clicked="@OnCancelButtonClicked">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@OnSubmitButtonClicked">Submit</Button>
        }
        else
        {
            <Button Color="Color.Warning" Clicked="@OnEditableButtonClicked">Change Password</Button>
        }
    }
</Card>

@code
{
    TextEdit PasswordTextEdit, UsernameTextEdit;
    LoginModel myLogin;
    bool isEditable = false;
    int idToQuery = -1;
    private string userType = string.Empty;

    // Blazor event
    protected override async Task OnInitializedAsync()
    {
        idToQuery = (await sessionStorage.GetAsync<int>("LoginId")).Value;
        userType = (await sessionStorage.GetAsync<string>("UserType")).Value ?? string.Empty;
        StateHasChanged();
    }



    void OnEditableButtonClicked()
    {
        isEditable = true;
    }

    void OnCancelButtonClicked()
    {
        isEditable = false;
    }

    async Task OnSubmitButtonClicked()
    {
        myLogin = new LoginModel
        {
            Id = idToQuery,
            Username = UsernameTextEdit.Text,
            Password = PasswordTextEdit.Text
        };


        @if (userType == "Student")
        {
            myLogin.UserType = UserType.Student;
        }
        else if (userType == "Staff")
        {
            myLogin.UserType = UserType.Staff;
        }
        else if (userType == "Admin")
        {
            myLogin.UserType = UserType.Admin;
        }




        // Update this UpdateLoginById in the database
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "UpdateLoginById/";

            // The HTTP request body we will sent
            string jsonLogin = JsonSerializer.Serialize<LoginModel>(myLogin);
            StringContent httpContent = new(jsonLogin);

            // Call the endpoint
            HttpResponseMessage response = await _clientFactory.CreateClient().PutAsync(endpoint, httpContent);
            isEditable = false;
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }
    }
}