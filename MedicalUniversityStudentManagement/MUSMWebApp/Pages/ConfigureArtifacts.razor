@page "/configureartifacts"
@using Microsoft.Extensions.Configuration
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration

@if (RequiredArtifacts is not null)
{
    if (RequiredArtifacts.Count > 0)
    {
        <h3>Current # of RequiredArtifacts:@RequiredArtifacts.Count</h3>
        @for (int i = 0; i < RequiredArtifacts.Count; i++)
        {
            if (i >= 0 && i < RequiredArtifacts.Count)
            {
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-md-8 offset-md-2">
                            <Card>
                                <CardBody>
                                    @RequiredArtifacts[i]?.Name
                                </CardBody>
                            </Card>
                        </div>
                    </div>
                </div>
            }
        }
    }
}






<hr />
<Button Color="Color.Success" Clicked="@OnCreateRequiredArtifactsButtonClicked">@CreateCloseButtonText</Button>
@if (CreateRequiredArtifact)
{
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8 offset-md-2">
                <Card>
                    <CardBody>
                        Name: <TextEdit @ref="RequiredArtifactNameTextEdit" Placeholder="ie. Collage Transcript" />
                    </CardBody>
                </Card>
            </div>
        </div>
    </div>
    <Button Color="Color.Success" Clicked="@OnSubmitButtonClicked">Submit</Button>
}



@code
{
    public List<RequiredArtifactModel> RequiredArtifacts { get; set; } = new List<RequiredArtifactModel>();
    public bool CreateRequiredArtifact = false;
    string CreateCloseButtonText = "Create Required Artifact";
    TextEdit RequiredArtifactNameTextEdit;

    // Blazor event
    protected override async Task OnInitializedAsync()
    {
                await Reload();
    }

    async Task Reload()
    {
        RequiredArtifacts = new List<RequiredArtifactModel>();
        // Update our RequiredArtifacts list
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetRequiredArtifacts/";

            IEnumerable<RequiredArtifactModel> getRequiredArtifactsResponse = await ClientFactory.CreateClient().GetFromJsonAsync<IEnumerable<RequiredArtifactModel>>(endpoint);
            RequiredArtifacts.Clear();
            RequiredArtifacts = getRequiredArtifactsResponse.ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }



        // always call StateHasChanged!
                StateHasChanged();
    }

    void OnCreateRequiredArtifactsButtonClicked()
    {
        if (CreateRequiredArtifact)
        {
            CreateRequiredArtifact = false;
            CreateCloseButtonText = "Create Required Artifact";
        }
        else
        {
            CreateRequiredArtifact = true;
            CreateCloseButtonText = "Close";
        }
                StateHasChanged();
    }

    async Task OnSubmitButtonClicked()
    {
        try
        {
            RequiredArtifactModel requiredArtifactToSend = new RequiredArtifactModel { Name = RequiredArtifactNameTextEdit.Text };
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "CreateRequiredArtifactAndReturnId/?staffId=2";

            // The HTTP request body we will send
            string jsonRequiredArtifact = JsonSerializer.Serialize<RequiredArtifactModel>(requiredArtifactToSend);
            StringContent httpContent = new(jsonRequiredArtifact);

            // Call the endpoint
            HttpResponseMessage response = await ClientFactory.CreateClient().PostAsync(endpoint, httpContent);
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }

        await Reload();
    }



}
