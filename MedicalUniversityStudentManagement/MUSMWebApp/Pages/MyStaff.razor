@page "/mystaff"
@inject IHttpClientFactory _clientFactory
@inject IConfiguration Configuration

<h1>My Staff</h1>

<CardBody>
    <Row>
        <Column>
            <h3>Staffs</h3>
            <Fields>
                <Field>
                    <FieldBody>
                        <Inline>
                            <Button Color="Color.Primary" Clicked="@ReloadTable" Margin="Margin.Is1" Size="Size.Small" Disabled="RefreshButtonDisabed" Loading="RefreshButtonDisabed"> Refresh</Button>
                        </Inline>
                    </FieldBody>
                </Field>
            </Fields>
            <DataGrid TItem="StaffModel"
                      @ref="dataGrid"
                      Data="@staffModels"
                      SortMode="DataGridSortMode.Multiple"
                      Striped="true"
                      Bordered="true"
                      Hoverable="true"
                      Filterable="true"
                      PageSize="10"
                      ShowPager="@true"
                      SelectedRowChanged="@OnSelectedRowChanged">
                <EmptyTemplate>No records...</EmptyTemplate>
                <DataGridColumns>
                    <DataGridColumn TItem="StaffModel" Field="@nameof(StaffModel.Id)" Caption="Id" Editable="true">
                    </DataGridColumn>
                    <DataGridColumn TItem="StaffModel" Field="@nameof(StaffModel.FirstName)" Caption="FirstName" Editable="true">
                    </DataGridColumn>
                    <DataGridColumn TItem="StaffModel" Field="@nameof(StaffModel.LastName)" Caption="LastName" Editable="true">
                    </DataGridColumn>

                </DataGridColumns>
            </DataGrid>
        </Column>
    </Row>
</CardBody>



@code {
    public DataGrid<StaffModel> dataGrid;
    public List<StaffModel> staffModels;
    public bool RefreshButtonDisabed;


    // Blazor event
    protected override async Task OnInitializedAsync()
    {
        await ReloadTable();
    }








    async Task ReloadTable()
    {
        // Update our Staffs list
        try
        {
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetStaff/";
            IEnumerable<StaffModel> getStaffsResponse = await _clientFactory.CreateClient().GetFromJsonAsync<IEnumerable<StaffModel>>(endpoint);
            staffModels = new List<StaffModel>(getStaffsResponse);
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }




        // always call StateHasChanged!
        StateHasChanged();
    }

    void OnSelectedRowChanged()
    {
        StateHasChanged();
    }
}
