@page "/studentinfo"
@using System.Text.Json
@inject IHttpClientFactory ClientFactory
@inject IConfiguration Configuration
@inject ProtectedSessionStorage sessionStorage

<Card>
    @{
        if (isEditable && UserType == "Student")
        {
            <CardTitle Size="5">Edit Student Info here:</CardTitle>
            <CardBody>
                StudentIdNumber: <TextEdit @ref="StudentIdNumberTextEdit" Placeholder="@myStudent?.StudentIdNumber.ToString()" />
                FirstName: <TextEdit @ref="FirstNameTextEdit" Placeholder="@myStudent?.FirstName" />
                LastName: <TextEdit @ref="LastNameTextEdit" Placeholder="@myStudent?.LastName" />
                Birthday: <br />
                <Card>
                    <CardBody>
                        Year (ie. 2002): <TextEdit @ref="BirthdayYearTextEdit" Placeholder="@myStudent?.Birthday.ToString()" /> Month (ie. 5): <TextEdit @ref="BirthdayMonthTextEdit" Placeholder="@myStudent?.Birthday.ToString()" /> Day (ie. 8): <TextEdit @ref="BirthdayDayTextEdit" Placeholder="@myStudent?.Birthday.ToString()" />
                    </CardBody>
                </Card>
                Address: <TextEdit @ref="AddressTextEdit" Placeholder="@myStudent?.Address" />
                Major: <TextEdit @ref="MajorTextEdit" Placeholder="@myStudent?.Major" />
                FirstYearEnrolled: <TextEdit @ref="FirstYearEnrolledTextEdit" Placeholder="@myStudent?.FirstYearEnrolled.ToString()" />
                HighSchoolAttended: <TextEdit @ref="HighSchoolAttendedTextEdit" Placeholder="@myStudent?.HighSchoolAttended" />
                UndergraduateSchoolAttended: <TextEdit @ref="UndergraduateSchoolAttendedTextEdit" Placeholder="@myStudent?.UndergraduateSchoolAttended" />
            </CardBody>
            <Button Clicked="@OnCancelButtonClicked">Cancel</Button>
            <Button Color="Color.Primary" Clicked="@OnSubmitButtonClicked">Submit</Button>
        }
        else
        {
            if (UserType == "Student")
            {
                <Button Color="Color.Warning" Clicked="@OnEditableButtonClicked">Edit</Button>
            }
            <CardBody>
                <CardTitle Size="5">Student Info</CardTitle>
                StudentIdNumber: @myStudent?.StudentIdNumber
                <br />
                FirstName: @myStudent?.FirstName
                <br />
                LastName: @myStudent?.LastName
                <br />
                Birthday: @myStudent?.Birthday.ToString()
                <br />
                Address: @myStudent?.Address
                <br />
                Major: @myStudent?.Major
                <br />
                FirstYearEnrolled: @myStudent?.FirstYearEnrolled.ToString()
                <br />
                HighSchoolAttended: @myStudent?.HighSchoolAttended
                <br />
                UndergraduateSchoolAttended: @myStudent?.UndergraduateSchoolAttended
            </CardBody>
        }
    }
</Card>

@code
{
    TextEdit StudentIdNumberTextEdit, FirstNameTextEdit, LastNameTextEdit, BirthdayYearTextEdit, BirthdayMonthTextEdit, BirthdayDayTextEdit, AddressTextEdit, MajorTextEdit, FirstYearEnrolledTextEdit, HighSchoolAttendedTextEdit, UndergraduateSchoolAttendedTextEdit;
    [Parameter]
    public StudentModel myStudent { get; set; } = null;
    public StaffModel myStaff { get; set; }
    private string UserType = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            UserType = (await sessionStorage.GetAsync<string>("UserType")).Value ?? string.Empty;
            StateHasChanged();
        }
    }

    // Blazor event
    protected override async Task OnInitializedAsync()
    {
        try
        {
            int idToQuery;
            if(myStudent == null)
            {
                idToQuery = (await sessionStorage.GetAsync<int>("LoginId")).Value;
            }
            else
            {
                idToQuery = myStudent.Id;
            }
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetStudentByLoginId";
            endpoint += '?' + $"loginId={idToQuery}";

            // Call the endpoint
            HttpResponseMessage response = await ClientFactory.CreateClient().GetAsync(endpoint);

            // Set our Student
            myStudent = await response.Content.ReadFromJsonAsync<StudentModel>();

            // Log the response
            Console.WriteLine(await response.Content.ReadAsStringAsync());

        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }
    }


    bool isEditable = false;

    void OnEditableButtonClicked()
    {
        isEditable = true;
    }

    void OnCancelButtonClicked()
    {
        isEditable = false;
    }

    async Task OnSubmitButtonClicked()
    {
        myStudent.StudentIdNumber = int.Parse(StudentIdNumberTextEdit?.Text);
        myStudent.FirstName = FirstNameTextEdit?.Text;
        myStudent.LastName = LastNameTextEdit?.Text;
        myStudent.Birthday = new DateTime(int.Parse(BirthdayYearTextEdit?.Text), int.Parse(BirthdayMonthTextEdit?.Text), int.Parse(BirthdayDayTextEdit?.Text));
        myStudent.Address = AddressTextEdit?.Text;
        myStudent.Major = MajorTextEdit?.Text;
        myStudent.FirstYearEnrolled = int.Parse(FirstYearEnrolledTextEdit?.Text);
        myStudent.HighSchoolAttended = HighSchoolAttendedTextEdit?.Text;
        myStudent.UndergraduateSchoolAttended = UndergraduateSchoolAttendedTextEdit?.Text;

        // Update this Student
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "UpdateStudentById/";

            // The HTTP request body we will send
            string jsonRequiredArtifact = JsonSerializer.Serialize<StudentModel>(myStudent);
            StringContent httpContent = new(jsonRequiredArtifact);

            // Call the endpoint
            HttpResponseMessage response = await ClientFactory.CreateClient().PutAsync(endpoint, httpContent);
            isEditable = false;
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }
    }
}
