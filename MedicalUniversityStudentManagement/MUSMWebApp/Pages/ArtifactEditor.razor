@inject IConfiguration Configuration
@inject IHttpClientFactory _clientFactory
@inject ProtectedSessionStorage sessionStorage
@inject IConfiguration Configuration

<h3>ArtifactEditor</h3>


<Card>
    @{
        foreach (KeyValuePair<RequiredArtifactModel, ArtifactModel> entry in RequiredArtifactToArtifactMap)
        {
            <Card>
                    <CardBody>
                        <CardTitle Size="5">@entry.Key.Name</CardTitle>
                        @if (UserType == "Staff")
                        {
                            <Button Clicked="@(=> _clientFactory.CreateClient().PutAsync(Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + $"UpdateArtifactById/?id={entry.Value?.Id.ToString()}&requiredArtifactId={entry.Value?.RequiredArtifactId.ToString()}&studentId={entry.Value?.StudentId.ToString()}&checkedOff={true.ToString()}", new HttpContent()))">Checkoff</Button>
                        }
                        @if (entry.Value?.Document?.Length == 0)
                        {
                            <p class="text-danger">Document needs submiting!</p>
                            <FileEdit Filter=".pdf" Changed="@OnChanged" />
                        }
                        else if (entry.Value?.Document?.Length > 0)
                        {
                            if (entry.Value?.CheckedOff == false)
                            {
                                <p class="text-warning">Submited, awaiting approval</p>
                            }
                            else
                            {
                                <p class="text-success">Submited and aproved!</p>
                            }
                        }

                    </CardBody>
            </Card>
        }

    }
</Card>



@code
{
    [Parameter]
    public bool IsCheckoffReadonly { get; set; } = true;
    // list of all the artifacts the student has. ***Size = amount of rows in tblRequiredArtifacts***
    List<ArtifactModel> student_artifacts = new List<ArtifactModel>();
    public List<RequiredArtifactModel> RequiredArtifacts { get; set; } = new List<RequiredArtifactModel>();

    Dictionary<RequiredArtifactModel, ArtifactModel> RequiredArtifactToArtifactMap = new Dictionary<RequiredArtifactModel, ArtifactModel>();
    [Parameter]
    public StudentModel myStudent { get; set; } = new StudentModel();


    private string UserType = string.Empty;




    // Blazor event
    protected override async Task OnInitializedAsync()
    {
        UserType = (await sessionStorage.GetAsync<string>("UserType")).Value ?? string.Empty;
        StateHasChanged();

        if (UserType == "Student")
        {
            myStudent.Id = (await sessionStorage.GetAsync<Int32>("LoginId")).Value;
        }


        await Reload();
    }



    async Task Reload()
    {
        // Update Required artifacts
        RequiredArtifacts = new List<RequiredArtifactModel>();
        // Update our RequiredArtifacts list
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetRequiredArtifacts/";

            IEnumerable<RequiredArtifactModel> getRequiredArtifactsResponse = await _clientFactory.CreateClient().GetFromJsonAsync<IEnumerable<RequiredArtifactModel>>(endpoint);
            RequiredArtifacts.Clear();
            RequiredArtifacts = getRequiredArtifactsResponse.ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }





        // Update our Artifacts list
        try
        {
            // The API endpoint to call
            string endpoint = Configuration.GetValue<string>("MUSMDatabaseServicesAPI") + "GetArtifactsByStudentId/?studentId=" + myStudent.Id;

            IEnumerable<ArtifactModel> getArtifactsResponse = await _clientFactory.CreateClient().GetFromJsonAsync<IEnumerable<ArtifactModel>>(endpoint);
            student_artifacts = new List<ArtifactModel>(getArtifactsResponse);
        }
        catch (Exception e)
        {
            Console.WriteLine("Database services must be offline");
        }



        MapRequiredArtifactsToArtifacts();
        // always call StateHasChanged!
        StateHasChanged();
    }

    public void MapRequiredArtifactsToArtifacts()
    {
        foreach (RequiredArtifactModel requiredArtifact in RequiredArtifacts)
        {
            ArtifactModel artifactModelToPair = new ArtifactModel();
            foreach (ArtifactModel artifact in student_artifacts)
            {
                if (artifact.RequiredArtifactId == requiredArtifact.Id)
                {
                    artifactModelToPair = artifact;
                }
            }

            RequiredArtifactToArtifactMap.Add(requiredArtifact, artifactModelToPair);
        }
    }

    void OnSelectedRowChanged()
    {
        StateHasChanged();
    }














    async Task OnChanged(FileChangedEventArgs e)
    {

    }
}